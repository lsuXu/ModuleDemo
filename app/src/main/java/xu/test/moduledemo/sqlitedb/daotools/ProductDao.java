package xu.test.moduledemo.sqlitedb.daotools;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import xu.test.moduledemo.sqlitedb.bean.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unique_id = new Property(1, Long.class, "unique_id", false, "UNIQUE_ID");
        public final static Property Product_code = new Property(2, String.class, "product_code", false, "PRODUCT_CODE");
        public final static Property Pick_up_time = new Property(3, String.class, "pick_up_time", false, "PICK_UP_TIME");
        public final static Property Let_down_time = new Property(4, String.class, "let_down_time", false, "LET_DOWN_TIME");
        public final static Property Create_time = new Property(5, String.class, "create_time", false, "CREATE_TIME");
    }

    private Query<Product> b_ProductListQuery;

    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" INTEGER," + // 1: unique_id
                "\"PRODUCT_CODE\" TEXT," + // 2: product_code
                "\"PICK_UP_TIME\" TEXT," + // 3: pick_up_time
                "\"LET_DOWN_TIME\" TEXT," + // 4: let_down_time
                "\"CREATE_TIME\" TEXT);"); // 5: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindLong(2, unique_id);
        }
 
        String product_code = entity.getProduct_code();
        if (product_code != null) {
            stmt.bindString(3, product_code);
        }
 
        String pick_up_time = entity.getPick_up_time();
        if (pick_up_time != null) {
            stmt.bindString(4, pick_up_time);
        }
 
        String let_down_time = entity.getLet_down_time();
        if (let_down_time != null) {
            stmt.bindString(5, let_down_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindLong(2, unique_id);
        }
 
        String product_code = entity.getProduct_code();
        if (product_code != null) {
            stmt.bindString(3, product_code);
        }
 
        String pick_up_time = entity.getPick_up_time();
        if (pick_up_time != null) {
            stmt.bindString(4, pick_up_time);
        }
 
        String let_down_time = entity.getLet_down_time();
        if (let_down_time != null) {
            stmt.bindString(5, let_down_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // unique_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // product_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pick_up_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // let_down_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnique_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setProduct_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPick_up_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLet_down_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreate_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "productList" to-many relationship of B. */
    public List<Product> _queryB_ProductList(Long unique_id) {
        synchronized (this) {
            if (b_ProductListQuery == null) {
                QueryBuilder<Product> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Unique_id.eq(null));
                b_ProductListQuery = queryBuilder.build();
            }
        }
        Query<Product> query = b_ProductListQuery.forCurrentThread();
        query.setParameter(0, unique_id);
        return query.list();
    }

}
