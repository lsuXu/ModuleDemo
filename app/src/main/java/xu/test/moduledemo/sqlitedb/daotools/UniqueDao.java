package xu.test.moduledemo.sqlitedb.daotools;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xu.test.moduledemo.sqlitedb.bean.Unique;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNIQUE".
*/
public class UniqueDao extends AbstractDao<Unique, Long> {

    public static final String TABLENAME = "UNIQUE";

    /**
     * Properties of entity Unique.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unique_code = new Property(1, String.class, "unique_code", false, "UNIQUE_CODE");
        public final static Property Bt_mac = new Property(2, String.class, "bt_mac", false, "BT_MAC");
        public final static Property Start_time = new Property(3, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(4, String.class, "end_time", false, "END_TIME");
        public final static Property Create_time = new Property(5, String.class, "create_time", false, "CREATE_TIME");
    }


    public UniqueDao(DaoConfig config) {
        super(config);
    }
    
    public UniqueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNIQUE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_CODE\" TEXT," + // 1: unique_code
                "\"BT_MAC\" TEXT," + // 2: bt_mac
                "\"START_TIME\" TEXT," + // 3: start_time
                "\"END_TIME\" TEXT," + // 4: end_time
                "\"CREATE_TIME\" TEXT);"); // 5: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNIQUE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Unique entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unique_code = entity.getUnique_code();
        if (unique_code != null) {
            stmt.bindString(2, unique_code);
        }
 
        String bt_mac = entity.getBt_mac();
        if (bt_mac != null) {
            stmt.bindString(3, bt_mac);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(4, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(5, end_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Unique entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String unique_code = entity.getUnique_code();
        if (unique_code != null) {
            stmt.bindString(2, unique_code);
        }
 
        String bt_mac = entity.getBt_mac();
        if (bt_mac != null) {
            stmt.bindString(3, bt_mac);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(4, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(5, end_time);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Unique readEntity(Cursor cursor, int offset) {
        Unique entity = new Unique( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // unique_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bt_mac
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // start_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // end_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Unique entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnique_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBt_mac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnd_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreate_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Unique entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Unique entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Unique entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
