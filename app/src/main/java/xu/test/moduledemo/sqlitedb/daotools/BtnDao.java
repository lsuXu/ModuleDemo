package xu.test.moduledemo.sqlitedb.daotools;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xu.test.moduledemo.sqlitedb.bean.Btn;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BTN".
*/
public class BtnDao extends AbstractDao<Btn, Long> {

    public static final String TABLENAME = "BTN";

    /**
     * Properties of entity Btn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unique_id = new Property(1, Long.class, "unique_id", false, "UNIQUE_ID");
        public final static Property Button_code = new Property(2, String.class, "button_code", false, "BUTTON_CODE");
        public final static Property Click_time = new Property(3, String.class, "click_time", false, "CLICK_TIME");
        public final static Property Product_code = new Property(4, String.class, "product_code", false, "PRODUCT_CODE");
        public final static Property Create_time = new Property(5, String.class, "create_time", false, "CREATE_TIME");
    }


    public BtnDao(DaoConfig config) {
        super(config);
    }
    
    public BtnDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BTN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" INTEGER," + // 1: unique_id
                "\"BUTTON_CODE\" TEXT," + // 2: button_code
                "\"CLICK_TIME\" TEXT," + // 3: click_time
                "\"PRODUCT_CODE\" TEXT," + // 4: product_code
                "\"CREATE_TIME\" TEXT);"); // 5: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BTN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Btn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindLong(2, unique_id);
        }
 
        String button_code = entity.getButton_code();
        if (button_code != null) {
            stmt.bindString(3, button_code);
        }
 
        String click_time = entity.getClick_time();
        if (click_time != null) {
            stmt.bindString(4, click_time);
        }
 
        String product_code = entity.getProduct_code();
        if (product_code != null) {
            stmt.bindString(5, product_code);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Btn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindLong(2, unique_id);
        }
 
        String button_code = entity.getButton_code();
        if (button_code != null) {
            stmt.bindString(3, button_code);
        }
 
        String click_time = entity.getClick_time();
        if (click_time != null) {
            stmt.bindString(4, click_time);
        }
 
        String product_code = entity.getProduct_code();
        if (product_code != null) {
            stmt.bindString(5, product_code);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(6, create_time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Btn readEntity(Cursor cursor, int offset) {
        Btn entity = new Btn( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // unique_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // button_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // click_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // product_code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Btn entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnique_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setButton_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClick_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreate_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Btn entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Btn entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Btn entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
