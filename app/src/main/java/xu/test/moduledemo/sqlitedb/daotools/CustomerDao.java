package xu.test.moduledemo.sqlitedb.daotools;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xu.test.moduledemo.sqlitedb.bean.Unique;

import xu.test.moduledemo.sqlitedb.bean.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CUSTOMER".
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Unique_id = new Property(1, Long.class, "unique_id", false, "UNIQUE_ID");
        public final static Property Customer_code = new Property(2, String.class, "customer_code", false, "CUSTOMER_CODE");
        public final static Property Sex = new Property(3, String.class, "sex", false, "SEX");
        public final static Property Age = new Property(4, String.class, "age", false, "AGE");
        public final static Property Entry_time = new Property(5, String.class, "entry_time", false, "ENTRY_TIME");
        public final static Property End_time = new Property(6, String.class, "end_time", false, "END_TIME");
        public final static Property Img_name = new Property(7, String.class, "img_name", false, "IMG_NAME");
        public final static Property Create_time = new Property(8, String.class, "create_time", false, "CREATE_TIME");
    }

    private DaoSession daoSession;


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" INTEGER," + // 1: unique_id
                "\"CUSTOMER_CODE\" TEXT," + // 2: customer_code
                "\"SEX\" TEXT," + // 3: sex
                "\"AGE\" TEXT," + // 4: age
                "\"ENTRY_TIME\" TEXT," + // 5: entry_time
                "\"END_TIME\" TEXT," + // 6: end_time
                "\"IMG_NAME\" TEXT," + // 7: img_name
                "\"CREATE_TIME\" TEXT);"); // 8: create_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CUSTOMER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindLong(2, unique_id);
        }
 
        String customer_code = entity.getCustomer_code();
        if (customer_code != null) {
            stmt.bindString(3, customer_code);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(5, age);
        }
 
        String entry_time = entity.getEntry_time();
        if (entry_time != null) {
            stmt.bindString(6, entry_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(7, end_time);
        }
 
        String img_name = entity.getImg_name();
        if (img_name != null) {
            stmt.bindString(8, img_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unique_id = entity.getUnique_id();
        if (unique_id != null) {
            stmt.bindLong(2, unique_id);
        }
 
        String customer_code = entity.getCustomer_code();
        if (customer_code != null) {
            stmt.bindString(3, customer_code);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(4, sex);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(5, age);
        }
 
        String entry_time = entity.getEntry_time();
        if (entry_time != null) {
            stmt.bindString(6, entry_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(7, end_time);
        }
 
        String img_name = entity.getImg_name();
        if (img_name != null) {
            stmt.bindString(8, img_name);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
    }

    @Override
    protected final void attachEntity(Customer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // unique_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // customer_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // age
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // entry_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // end_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // img_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // create_time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnique_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCustomer_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSex(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAge(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEntry_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEnd_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImg_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Customer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUniqueDao().getAllColumns());
            builder.append(" FROM CUSTOMER T");
            builder.append(" LEFT JOIN UNIQUE T0 ON T.\"UNIQUE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Customer loadCurrentDeep(Cursor cursor, boolean lock) {
        Customer entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Unique unique = loadCurrentOther(daoSession.getUniqueDao(), cursor, offset);
        entity.setUnique(unique);

        return entity;    
    }

    public Customer loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Customer> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Customer> list = new ArrayList<Customer>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Customer> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Customer> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
